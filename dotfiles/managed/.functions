#!/bin/bash

print_brew_content() {
  echo -e "
Installed Homebrew Packages:
----------------------------"
  brew leaves

  echo -e "
Installed Homebrew Casks:
-------------------------"
  brew list --cask
}

##############################################
#                 Utilities
##############################################
# Create a new directory and cd into it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  # shellcheck disable=SC2199
  if [[ -n "$@" ]]; then
    du ${arg} -- "$@"
  else
    du ${arg} -- .[^.]* *
  fi
}

# bkr ./some_script.sh # some_script.sh is now running in the background
bkr() {
  (nohup "$@" &>/dev/null &)
}

##############################################
#                   IDEs
##############################################
kill_intellij() {
  local pid=$(ps -ef | grep -v grep | grep idea | awk '{print $2}')

  if [[ ! -z ${pid} ]]; then
    echo "Killing idea process ${pid}..."
    kill -9 "${pid}"
  else
    echo "Idea is not running."
  fi

  echo "\n  Done.\n"
}

##############################################
#                  DOCKER
##############################################
docker_remove_dangling_intermediate_images () {
	local dangling_images="$(docker images -f "dangling=true" -q)"
	if [[ ! -z "${dangling_images}" ]]; then
		echo "Removing dangling intermediate images..."
		local images_arr=(`echo $dangling_images | tr '\n' ' '`)
	  for (( i=0; i < ${#images_arr[@]}; i++ ))
    do
      local image_to_remove=${images_arr[i]}
      if [[ ! -z ${image_to_remove} ]]; then
        echo "Removing image. id: ${image_to_remove}"
        docker rmi -f "${image_to_remove}"
      fi
    done
	else
    log_info "No dangling images found"
  fi
}

docker_remove_stopped_containers() {
  docker container prune -f
}
